# Default values for base.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#Define environments
env:
  #define your environment here
  name: env-name #develop, release, prod 

gitRepo:
  #define you repo-name here e.g backend-service
  name: none
## Deployment.yaml #
replicaCount: 1

nameOverride: ""
fullnameOverride: ""

image:
  repository: nginx # {"$imagepolicy": "flux-system:podinfo:name"}
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest # {"$imagepolicy": "flux-system:podinfo:tag"}
  pullPolicy: IfNotPresent

  imagePullSecrets:
  - name: gcr-json-key

# -- @param `updateStrategy` is a Strategy how deployment will Rollout the Updates
updateStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 25%
  #   maxUnavailable: 0%

initContainers: []
  # - name: sysctl
  #   image: busybox:1.31.1
  #   imagePullPolicy: IfNotPresent
  #   securityContext:
  #     privileged: true
  #     runAsUser: 0
  #   command: ['sh', '-c', 'sysctl -w fs.inotify.max_user_watches=32768']
  # - name: initContainers2
  #   image: busybox:1.31.1
  #   imagePullPolicy: IfNotPresent
  #   securityContext:
  #     privileged: true
  #     runAsUser: 0
  #   command: ['sh', '-c', 'sysctl -w fs.inotify.max_user_watches=32768']

hostAliases: []
  # - ip: "10.5.43.121"
  #   hostnames:
  #     - "keycloak-develop.id.ninenine.dev"

# Sidecar
sidecar:
  enabled: false
  sidecarContainers:
  - name: cloudsql-proxy
    image: gcr.io/cloudsql-docker/gce-proxy:1.16
    command: ["/cloud_sql_proxy",
              "-instances=projectname:zone:dbInstanceName=tcp:dbPort",
              # If running on a VPC, the Cloud SQL proxy can connect via Private IP. See:
              # https://cloud.google.com/sql/docs/mysql/private-ip for more info.
              "-ip_address_types=PRIVATE",
              "-credential_file=/secrets/service_account.json"]
    securityContext:
      runAsUser: 2  # non-root user
      allowPrivilegeEscalation: false
    volumeMounts:
      - name: db-proxy-credentials
        mountPath: /secrets/
        readOnly: true

configmap:
  enabled: true
  name: "configName"
  
secret:
  enabled: false
  name: "demo"
  ## Add secret if sidecar enabled or create using kubectl first if needed ##

podAnnotations:
  kubernetes.io/change-cause: "CHANGE_CAUSE_MESSAGE"
  sidecar.istio.io/inject: "true"
  gitUrl: "https://github.com/urbanindo/99-charts.git"

enVar:
  # Reflection pattern for web services on kubernetes.
  # See here for more info: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
  - name: MY_POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: MY_POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: MY_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: MY_HOST_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    memory: 1024M
  requests:
    cpu: 40m
    memory: 363Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 2
  QPStarget: 7
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

hpaAnnotations:
  enabled: true
  prometheusServer: http://prometheus-server.monitoring.svc

# Health Check
livenessProbe: {}
  # failureThreshold: 10
  # httpGet:
  #   path: /healthzzz
  #   port: 80
  #   scheme: HTTP
  # initialDelaySeconds: 10
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 20

readinessProbe: {}
  # failureThreshold: 10
  # httpGet:
  #   path: /healthz
  #   port: 80
  #   scheme: HTTP
  # initialDelaySeconds: 10
  # periodSeconds: 10
  # successThreshold: 1
  # timeoutSeconds: 10

startupProbe: {}
  # httpGet:
  #   path: /healthz
  #   port: liveness-port
  # failureThreshold: 30
  # periodSeconds: 10

lifeCycle: {}
  # preStop:
  #   exec:
  #     command:
  #     - sleep
  #     - "15"

volumeMounts:
  - name: configName
    mountPath: /targetPath
    subPath: fileName

volumes:
  - name: configName
    configMap:
      name: configName
      items:
        - key: fileName
          path: fileName
  ## Add volumes if sidecar enabled or needed ##
  # - name: db-proxy-credentials
  #         secret:
  #           secretName: db-proxy-credentials
  ## End of sidecar volumes
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

nodeSelector: {}

tolerations: []

affinity: {}

## End of deployment.yaml

## service.yaml

service:
  annotations: {}
  type: ClusterIP
  srcPort: 80
  # name: grpc #default http
  dstPort: 80
  # protocol name of port
  # e.g. 
  # protocol: TCP
  protocol: ""
  # Optional param for adding additional ports more than 1 port
  # e.g. 
  # additionalPorts: 
  #   - srcPort: 443
  #     dstPort: 443
  #     protocol: TCP #default TCP
  #     name: https #required and cannot be same with another port name
  additionalPorts: []

## End of service.yaml

## Ingress
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
## End of ingress

## Istio Config
virtualService:
  enabled: true
  gateways: []
  hosts: []
  retries: {}
    # attempts: 3
    # perTryTimeout: 60s
    # retryOn: gateway-error,connect-failure,refused-stream
  timeout: ""
  customHTTPRoutes: [] # https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPRoute
    # - route:
    #     - destination:
    #         host: api-primary
    #       weight: 100
    #     - destination:
    #         host: api-canary
    #       weight: 0
    #   timeout: 10s
  extrasSpec: {} # https://istio.io/latest/docs/reference/config/networking/virtual-service/#VirtualService
    # tls:
    #   - match:
    #     - port: 443
    #       sniHosts:
    #       - login.bookinfo.com
    #     route:
    #     - destination:
    #         host: login.prod.svc.cluster.local
    #   - match:
    #     - port: 443
    #       sniHosts:
    #       - reviews.bookinfo.com
    #     route:
    #     - destination:
    #         host: reviews.prod.svc.cluster.local
destinationRule:
  enabled: true
  loadBalanceMode: LEAST_CONN #LoadBalancing algorithm, ROUND_ROBIN etc

## End of istio config